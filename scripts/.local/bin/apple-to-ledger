#!/usr/bin/env python

import argparse
import csv
import glob
from datetime import datetime

class Transaction:
    def __init__(self, date, description, category, amount, currency):
        self.date = date
        self.description = description
        self.category = category
        self.amount = amount
        self.currency = currency

    def __eq__(self, other):
        return (
            self.date == other.date
            and self.description == other.description
            and self.category == other.category
            and self.amount == other.amount
            and self.currency == other.currency
        )

    def __hash__(self):
        return hash((self.date, self.description, self.category, self.amount, self.currency))

def process_csv_file_print(csvfilename):
    transactions = set()
    with open(csvfilename) as csvfile:
        reader = csv.DictReader(csvfile)
        
        for row in reader:
            # date = row['Transaction Date']
            # date = datetime.strptime(row['Transaction Date'], '%Y-%m-%d').strftime('%m/%d/%Y')
            date = datetime.strptime(row['Transaction Date'], '%m/%d/%Y').strftime('%Y-%m-%d')
            description = row['Merchant']
            category = row['Category']
            amount = abs(float(row['Amount (USD)']))
            currency = 'USD'
            transaction = Transaction(date, description, category, amount, currency)
            if transaction in transactions:
                # print(f"Transaction already processed: {transaction}")
                pass
            else:
                transactions.add(transaction)
                print(f"{date} {description}")
                print(f"  Expenses:{category}  {amount:.2f} {currency}")
                print("  Liabilities:CreditsCards:AppleCard")


def process_csv_file_write(csvfilename, outputfilename):
    transactions = set()
    with open(csvfilename) as csvfile, open(outputfilename, 'w') as outfile:
        writer = csv.writer(outfile)
        # writer.writerow(['date', 'description', 'category', 'amount', 'currency'])
        reader = csv.DictReader(csvfile)
        for row in reader:
            # date = datetime.strptime(row['Transaction Date'], '%Y-%m-%d').strftime('%m/%d/%Y')
            date = datetime.strptime(row['Transaction Date'], '%m/%d/%Y').strftime('%Y-%m-%d')
            description = row['Merchant']
            category = row['Category']
            amount = abs(float(row['Amount (USD)']))
            currency = 'USD'
            transaction = Transaction(date, description, category, amount, currency)
            if transaction in transactions:
                pass
            else:
                transactions.add(transaction)
                writer.writerow([''+date+' '+description])
                writer.writerow(['  Expenses:' + category +' '+ str(amount) + ' USD'])
                writer.writerow(['  Liabilities:CreditsCards:AppleCard'])

def main():
    parser = argparse.ArgumentParser(description='Convert Apple Card transactions CSV to ledger format')
    parser.add_argument('filenames', metavar='filename', type=str, nargs='+', help='the filename(s) of the input CSV file(s)')
    parser.add_argument('--output', '-o', metavar='filename', type=str, default='', help='the name of the output file')
    parser.add_argument('--stdout', '-s', action='store_true', help='print output to stdout instead of writing to file')
    args = parser.parse_args()

    # Loop through each filename and process the corresponding CSV file
    for filename in args.filenames:
        csvfilenames = glob.glob(filename)
        for csvfilename in csvfilenames:
            if args.stdout:
                process_csv_file_print(csvfilename)
            else:
                if args.output:
                    outputfilename = args.output
                elif len(args.filenames) == 1:
                    outputfilename = f"{csvfilename.split('.')[0]}.dat"
                else:
                    outputfilename = "output.dat"
                process_csv_file_write(csvfilename, outputfilename)

if __name__ == '__main__':
    main()

