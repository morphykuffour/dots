#  tmux Config

# leader key
unbind C-b
set -g prefix C-a
bind-key C-a send-prefix


set -g base-index 1
set-option -sg escape-time 1
# set-option -g default-shell zsh

# set -g default-terminal "screen-256color"
# set -g default-terminal "xterm-256color"
set-option -sa terminal-overrides ',xterm-256color:RGB'
# set-option -g default-terminal "tmux-256color"

# neovim
set-option -g focus-events on

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

# clear screen
bind C-l send-keys 'C-l'
unbind r
bind r source-file ~/.tmux.conf \; display "Reloaded ~/.tmux.conf"

# vim-like keybinds
setw -g mode-keys vi
bind -r ^ last-window
bind -r k select-pane -U
bind -r j select-pane -D
bind -r h select-pane -L
bind -r l select-pane -R

# quick pane cycling
unbind ^A
bind ^A select-pane -t :.+
bind-key | split-window -h -c '#{pane_current_path}'  # Split panes horizontal
bind-key \\ split-window -v -c '#{pane_current_path}' # Split panes vertically

# quick window cycling
unbind NPage
unbind PPage
# bind -n PPage next-window
# bind -n NPage previous-window
bind -n M-> next-window
bind -n M-< previous-window

# Use vim keybindings in copy mode
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
 
# copy on selection
set -g mouse on
set-option -s set-clipboard off
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -selection clipboard -i"
# Linux only
bind -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if -Ft= '#{pane_in_mode}' 'send-keys -M' 'select-pane -t=; copy-mode -e; send-keys -M'"
bind -n WheelDownPane select-pane -t= \; send-keys -M
bind -n C-WheelUpPane select-pane -t= \; copy-mode -e \; send-keys -M
bind -T copy-mode-vi    C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-vi    C-WheelDownPane send-keys -X halfpage-down
bind -T copy-mode-emacs C-WheelUpPane   send-keys -X halfpage-up
bind -T copy-mode-emacs C-WheelDownPane send-keys -X halfpage-down

# To copy, left click and drag to highlight text in yellow, 
# once you release left click yellow text will disappear and will automatically be available in clibboard
# # Use vim keybindings in copy mode
setw -g mode-keys vi
# Update default binding of `Enter` to also use copy-pipe
unbind -T copy-mode-vi Enter
bind-key -T copy-mode-vi v send-keys -X begin-selection

# Linux
# bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -selection c"
# bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"
# MacOs
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
# Windows WSL
if-shell -b 'test -n "$WSLENV"' 'bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel clip.exe'
if-shell -b 'test -n "$WSLENV"' 'bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel clip.exe'

# Move windows to Panes m for vertical, M for horizontal
bind-key m choose-window -F "#{window_index}: #{window_name}" "join-pane -h -t %%"
bind-key M choose-window -F "#{window_index}: #{window_name}" "join-pane -v -t %%"

# scripts
bind-key -r i run-shell "tmux neww tmux-cht.sh"

# drag and drop
# bind -n DoubleClick1Pane run-shell "dragon -x '#{pane_current_path}/#{mouse_word}'"

# status bar
# set -g status-position top
set -g status-style 'bg=#ffdb01 fg=#0000ff'
# set -g status-left-style 'bg=#ff0125'
set -g window-status-current-style "bg=default,reverse"
set -g window-status-separator ''  # No spaces between windows in the status bar.
set -g window-status-format "#{?window_start_flag,, }#I:#W#{?window_flags,#F, } "
set -g window-status-current-format "#{?window_start_flag,, }#I:#W#{?window_flags,#F, } "

# change search mode to blue
set-hook -g pane-mode-changed 'if -F "#{m/r:(copy|view)-mode,#{pane_mode}}"  "set status-style bg=#0125ff" "set -u status-style"'

# named window
bind-key C command-prompt -p "Create window with name:" "new-window; rename-window '%%'"

# primeagen tmux-sessionizer
# bind-key -r f run-shell "tmux neww ~/.local/bin/tmux-sessionizer"
# bind-key -r G run-shell "~/.local/bin/tmux-sessionizer ~/dots"
bind-key 0 if-shell 'tmux select-window -t :0' '' 'new-window -t :0'
set -g @resurrect-strategy-nvim 'session'
set -g @resurrect-dir '$HOME/.resurrect'
set -g @continuum-restore 'on'

# plugins
# run-shell $HOME/.tmux/plugins/tmux-continuum/continuum.tmux
run-shell $HOME/.tmux/plugins/tmux-open/open.tmux
run-shell $HOME/.tmux/plugins/tmux-yank/yank.tmux
# run-shell $HOME/.tmux/plugins/tmux-resurrect/resurrect.tmux
# run-shell $HOME/.tmux/plugins/tmux-modal/tmux-modal.tmux 
# run-shell $HOME/.tmux/plugins/tmux-fpp/fpp.tmux

set -g @modal-keybindings-conf $HOME/.tmux-modal-keybindings.conf
set -g @modal-yesno-cmd on


